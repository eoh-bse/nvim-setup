{
  "webcomponent-vanilla": {
    "description": "Vanilla Web Component Template",
    "scope": "typescript",
    "prefix": "webcomp-vanilla",
    "body": [
      "import { ${Component}ObservedProp } from \"./types\";",
      "import { State } from \"../../models/state.js\";",
      "",
      "class ${Component} extends HTMLElement {",
      "  private static readonly observedProps: readonly ${Component}ObservedProp[] = [];",
      "",
      "  private readonly state: State = new State();",
      "",
      "  constructor() {",
      "    super();",
      "",
      "    this.attachShadow({ mode: \"open\" });",
      "  }",
      "",
      "  static html: string = `<div></div>`;",
      "",
      "  static get observedAttributes(): readonly string[] {",
      "    return ${Component}.observedProps;",
      "  }",
      "",
      "  connectedCallback(): void {",
      "    this.render();",
      "    this.registerElements();",
      "    this.registerEventListeners();",
      "  }",
      "",
      "  attributeChangedCallback(property: string, oldValue: any, newValue: any): void {",
      "    if (oldValue === newValue)",
      "      return;",
      "",
      "    this.state.state(property, newValue);",
      "  }",
      "",
      "",
      "  render(): void {",
      "    this.shadowRoot.innerHTML = ${Component}.html;",
      "  }",
      "",
      "  registerElements(): void {",
      "  }",
      "",
      "  registerEventListeners(): void {",
      "  }",
      "}",
      "",
      "customElements.define(\"component-tag\", ${Component});",
      "",
      "declare global {",
      "  interface HTMLElementTagNameMap {",
      "    \"component-tag\": ${Component}",
      "  }",
      "}"
    ]
  },
  "webcomponent-base": {
    "description": "Web Component Template with BaseComponent (based on web-template-component (https://github.com/eoh-bse/web-component-template))",
    "scope": "typescript",
    "prefix": "webcomp-base",
    "body": [
      "import { type Css, BaseComponent, html, css } from \"../base-component/base-component.js\";",
      "import { ${Component}ObservedProp } from \"./types.js\";",
      "",
      "class ${Component} extends BaseComponent {",
      "  protected static override readonly observedProps: readonly ${Component}ObservedProp[] = [];",
      "",
      "  private header: HTMLHeadingElement;",
      "",
      "  static override styles: Css = css`",
      "    h1 {",
      "      color: black;",
      "    }",
      "  `;",
      "",
      "  static override template: HTMLTemplateElement = html`",
      "    <div>",
      "      <h1></h1>",
      "    </div>",
      "  `;",
      "",
      "  protected override async onRender(): Promise<void> {",
      "    this.registerElements();",
      "    this.registerEventListeners();",
      "    await this.setupProps();",
      "  }",
      "",
      "  registerElements(): void {",
      "    this.header = this.shadowRoot.querySelector(\"h1\");",
      "  }",
      "",
      "  registerEventListeners(): void {",
      "  }",
      "",
      "  async setupProps(): Promise<void> {",
      "    await this.state.addUpdateHookAndTrigger(${Component}ObservedProp.SomeKeyInState, (value: any): Promise<void> => {",
      "      alert(\"State has changed!\");",
      "      return Promise.resolve();",
      "    });",
      "  }",
      "}",
      "",
      "customElements.define(\"component-tag\", ${Component});",
      "",
      "declare global {",
      "  interface HTMLElementTagNameMap {",
      "    \"component-tag\": ${Component}",
      "  }",
      "}"
    ]
  }
}
